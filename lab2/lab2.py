class Ask():
    def __init__(self,choices=['y','n']):
        self.choices = choices
    def ask(self):
        if max([len(x) for x in self.choices])>1:
            for i,x in enumerate(self.choices):
                print("{0}. {1}".format(i,x))
            x = int(input())
            return self.choices[x]
        else:
            print("/".join(self.choices))
            return input()

class Content():
    def __init__(self,x):
        self.x=x
        
class If(Content):
    pass

class AND(Content):
    pass

class OR(Content):
    pass


rules = {
    'default': Ask(['y','n']),
   'Зона действия' : Ask(['земля', 'вода', 'воздух']),
    'Цель применения' : Ask(['Перевозка самолетов','Перевозка грузов','Перевозка пассажиров',
                              'поражение противника в воздухе', 'атака по выборочным целям',
                                'атака по площади', 'поражение противника на земле', 'Поражение кораблей противника']),
    'Тип топлива' : Ask(['Керосин', 'ДТ', 'Нет необходимости в топливе', 'Сжиженный газ', 'Бензин']),
    'Особенности устройства' : Ask(['Отсутствие кабины', 'Есть кабина', 'имеет камеру с теплым воздухом',
                                     'имеет корзину для экипажа', 'задние колеса больше передних', 'два колеса', 'есть шасси-поплавки']),
    'Экипаж' : Ask(['1', 'от 2', 'от 100', 'Не нуждается в экипаже']),
    'Количество пассажиров' : Ask(['до 20', 'до 50','до 800']),
    'Принцип движения': Ask(['приводится в действие нагреванием воздуха в камере', 'приводится в действие силой реактивной тяги',
                              'приводится в действие силой тяги приводящего винта', 'приводится в действие силой тяги двигателя',
                                'Работает на реактивной тяге', 'Двигается за счет гребли', 'Двигается за счет педалей', 'Двигается за счет волн', 'Двигается за счет паруса', 'Двигается за счет мотора']),
    'Грузоподъемность': Ask(['Высокая','Низкая']),
    'Водоизмещение' : Ask(['Большое', 'Малое']),
    'Вооружение': Ask(['Присутствует','Стоит']),

    'Личный авиатранспорт' : If(OR([AND(['Нет необходимости в топливе','Зона действия:воздух']), AND(['Экипаж:1', 'Зона действия:воздух'])])),
    'Аэростат' : If(OR(['Особенности устройства:имеет камеру с теплым воздухом','Особенности устройства:имеет корзину для экипажа',
                        AND(['Принцип движения:приводится в действие нагреванием воздуха в камере', 'Зона действия:воздух'])])),
    'Самолет' : If(['Тип топлива:Керосин','Зона действия:воздух','Принцип движения:приводится в действие силой тяги двигателя']),
    'Гражданский самолет' : If(OR(['Гражданские перевозки', 'Самолет'])),
    'Военный самолет' : If([AND(['Самолет', 'Вооружение:Присутствует']), 'Вооружение:Стоит']),

    'ТС:Штурмовик' : If(['Цель применения:атака по выборочным целям', 'Цель применения:поражение противника на земле', 'Военный самолет']),
    'ТС:Бомбардировщик' : If(['Цель применения:атака по площади', 'Цель применения:поражение противника на земле', 'Военный самолет', 'Грузоподъемность:Высокая']),
    'ТС:Истребитель' : If(['Цель применения:поражение противника в воздухе', 'Военный самолет']),
    'ТС:Грузовой самолет' : If(['Цель применения:Перевозка грузов', 'Гражданский самолет','Грузоподъемность:Высокая']),
    'ТС:Аэробус' : If(['Цель применения:Перевозка пассажиров', 'Гражданский самолет','Грузоподъемность:Высокая', 'Количество пассажиров:до 800']),
    'ТС:БПЛА' : If(['Экипаж:Не нуждается в экипаже', 'Зона действия:воздух']),
    'ТС:Планер': If(['Личный авиатранспорт', 'Есть кабина']),
    'ТС:Дельтаплан': If(['Личный авиатранспорт', 'Отсутствие кабины']),
    'ТС:Воздушный шар': If(['Аэростат', 'Отсутствуют органы управления']),
    'ТС:Дирижабль' : If(['Аэростат', 'Количество пассажиров:до 50']),
    'ТС:Ракета' : If(['Зона действия:воздух','Принцип движения:приводится в действие силой реактивной тяги']),
    'ТС:Вертолет' : If(['Количество пассажиров:до 20', 'Зона действия:воздух', 'Принцип движения:приводится в действие силой тяги приводящего винта']),
  
    'Масса': Ask(['до 2х тонн', 'от 15 тонн']),
    'Права': Ask(['обычная категория', 'специальная категория', 'гоночная лицензия']),
    'Грузовой': Ask(['ковш', 'отсек', 'прицеп']),
    'Пассажирские места': Ask(['0, до 4х', 'до 2х']),
    'Двери': If(OR(['2 двери', '4 двери', 'Зона действия:земля'])),
    'Мобильный': If(AND(['Масса:до 2х тонн', 'хорошая управляемость', 'Зона действия:земля'])),
    'Шины для бездорожья': If(OR(['Резина:внедорожная', 'Резина:с крупными грунтозацепами'])),
    'Спортивные шины': If(AND(['большая площадь соприкосновения с поверхностью', 
                               						OR(['Резина:гладкая', 'Резина:специальный рисунок протектора'])])),
    'Зимняя резина': If(OR(['Резина:шипованная', 'Резина:фрикционная'])),
    'Городские шины': If(OR(['Резина:летняя', 'Резина:всесезонная', 'Зимняя резина'])),
    'Городской транспорт': If(AND(['более 6 пассажирских мест', 'оплата за проезд'])),
    
    'ТС:Легковой': If(['Двери', 'Городские шины', 'Мобильный', 'Права:обычная категория', 'Пассажирские места: до 4х']),
    'ТС:Внедорожник': If(['Права:обычная категория', 'Шины для бездорожья', 'Двери', 'Пассажирские места: до 4х']),
    'ТС:Болид': If(['Права:гоночная лицензия', 'Мобильный', 'Пассажирские места: 0', 'Спортивная резина']),
    'ТС:Камаз': If(['Права:специальная категория', 'Шины для бездорожья', 'Двери', 'Масса:от 15 тонн', 'Цель применения:перевозка грузов', 'Грузовой:ковш', 'Пассажирские места:до 2х']),
    'ТС:Автобус': If(['Городской транспорт', 'Двери', 'Автоматические двери', 'Городские шины', 'Права:специальная категория']),
    'ТС:Трактор': If(['Двери', 'Права:специальная категория', 'Особенности устройства:задние колеса больше передних', 'Пассажирские места:0', 
                      'Шины для бездорожья', 'Цель применения:перевозка грузов']),
    'ТС:Мотоцикл': If(['Спортивные шины', 'Особенности устройства:два колеса', 'Мобильный', 'Пассажирские места:до 2х', 'Права:специальная категория']),

    'Крупное судно': If(OR(['Водоизмещение:Большое', 'Грузоподъемность:Высокая', 'Экипаж:от 100'])),
    'Военное судно': If(OR(['Вооружение:Присутствует', 'Вооружение:Стоит'])),
    'Легкое судно' : If(OR(['Водоизмещение:Малое', 'Грузоподъемность:Низкая', 'Экипаж:от 1'])),
    'Гражданское судно' : If(OR(['Цель применения:Перевозка грузов', 'Цель применения:Перевозка пассажиров'])),

    'Крупное военное судно' : If(['Крупное судно', 'Военное судно', 'Зона действия:вода']),
    'Легкое военное судно' : If(['Легкое судно', 'Военное судно', 'Зона действия:вода']),
    'Крупное гражданское судно' : If(['Крупное судно', 'Гражданское судно', 'Зона действия:вода']),
    'Легкое гражданское судно' : If(['Легкое судно', 'Гражданское судно', 'Зона действия:вода']),
    'Катер' : If(['Особенности устройства:Есть кабина', 'Принцип движения:Двигается за счет мотора', 'Тип топлива:Бензин']),

    'ТС:Авианосец' : If(['Крупное военное судно', 'Цель применения:Перевозка самолетов']),
    'ТС:Фрегат' : If(['Крупное военное судно', 'Принцип движения:Двигается за счет паруса']),
    'ТС:Атомная подлодка' : If(['Крупное военное судно', 'Подводная лодка']),
    'ТС:Лайнер' : If(['Крупное гражданское судно', 'Ходит на большие расстояния', 'Тип топлива:ДТ']),
    'ТС:Лайнер' : If(['Крупное гражданское судно', 'Тип топлива:Сжиженный газ']),
    'ТС:Транспортная подлодка' : If(['Легкое гражданское судно', 'Подводная лодка']),
    'ТС:Боевой катер' : If(['Легкое военное судно', 'Катер']),
    'ТС:Прогулочный катер' : If(['Легкое гражданское судно', 'Катер']),
    'ТС:Яхта' : If(['Легкое гражданское судно', 'Управляется штурвалом', 'Принцип движения:Движется за счет паруса']),
    'ТС:Парусная доска' : If(['Легкое гражданское судно', 'Принцип движения:Движется за счет волн', 'Принцип движения:Движется за счет паруса']),
    'ТС:Гидроцикл':If(['Особенности устройства:Отсутствие кабины', 'Принцип движения:Двигается за счет мотора', 'Легкое гражданское судно', 'Тип топлива:Бензин']),
    'ТС:Галера' : If(['Легкое военное судно', 'Принцип движения:Движется за счет гребли']),
    'ТС:Катамаран' : If(['Легкое гражданское судно', 'Принцип движения:Движется за счет педалей']),
    'ТС:БП лодка автомат' : If(['Легкое гражданское судно', 'Экипаж:Не нуждается в экипаже']),
    'ТС:Беспилотная торпеда': If(['Цель применения:Поражение кораблей противника', 'Экипаж:Не нуждается в экипаже', 'Приницип движенния:Работает на реактивной тяге']),
    'ТС:Подводная мина' : If(['Недвижима', 'Экипаж:Не нуждается в экипаже'])
}

class KnowledgeBase():
    def __init__(self,rules):
        self.rules = rules
        self.memory = {}
        
    def get(self,name):
        if name in self.memory.keys():
            return self.memory[name]
        for fld in self.rules.keys():
            if fld==name or fld.startswith(name+":"):
                # print(" + proving {}".format(fld))
                value = 'y' if fld==name else fld.split(':')[1]
                res = self.eval(self.rules[fld],field=name)
                if res=='y':
                    self.memory[name] = value
                    return value
        # field is not found, using default
        res = self.eval(self.rules['default'],field=name)
        self.memory[name]=res
        return res
                
    def eval(self,expr,field=None):
        if isinstance(expr,Ask):
            print(field)
            return expr.ask()
        elif isinstance(expr,If):
            return self.eval(expr.x)
        elif isinstance(expr,AND) or isinstance(expr,list):
            expr = expr.x if isinstance(expr,AND) else expr
            for x in expr:
                if self.eval(x)=='n':
                    return 'n'
            return 'y'
        elif isinstance(expr,OR):
            for x in expr.x:
                if self.eval(x)=='y':
                    return 'y'
            return 'n'
        elif isinstance(expr,str):
            return self.get(expr)
        else:
            print("Unknown expr: {}".format(expr))
            
kb = KnowledgeBase(rules)
kb.get('ТС')
print (kb.memory['ТС'])